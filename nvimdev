#!/bin/bash

# Set the default values
WORKSPACEDIR=$(pwd)
NEOVIMDIR="/home/$USER/.nvimdev"
SSH_DIR=""
X11_CONNECT=""
NETWORK=""
display_help() {
	echo "Usage: $(basename $0) [COMMAND] [OPTIONS]"
	echo ""
	echo "Commands:"
	echo "  s  start [id]    Create a container or attach to an existing one with the given ID"
	echo "  l, list          List all containers created by this script"
	echo "  r, remove [id]   Remove a stopped container"
	echo "  -h, --help    Display this help message"
	echo ""
	echo "Options:"
	echo "  --workspacedir DIR  Set the workspace directory (default: current directory)"
	echo "  --neovimdir    DIR  Set the Neovim configuration directory (default: ~/.config/nvim)"
}

get_git_name_and_mail() {
	# Get the git user name
	git_name=$(git config --global user.name)
	if [ -z "$git_name" ]; then
		git_name=""
	fi

	# Get the git user email
	git_email=$(git config --global user.email)
	if [ -z "$git_email" ]; then
		git_email=""
	fi

	# Return podman run --env string
	echo "--env GIT_USER_NAME=$git_name --env GIT_USER_EMAIL=$git_email"
}

remove_container() {
	local id="$1"
	local eng="$2"

	$eng rm "${id}_nvim_dev"
	echo "Removed ${id}_nvim_dev container"
}

# Function to start and attach to an existing container
start_and_attach_container() {
	local id="$1"
	local eng="$2"

	$eng start "${id}_nvim_dev"
	$eng attach "${id}_nvim_dev"
}

# Function to run a container
run_container() {
	local id="$1"
	local eng="$2"
	local workspacedir="$3"
	local neovimdir="$4"

	# Check if a container with the same ID already exists
	container_exists=$($eng ps -a --filter "name=${id}_nvim_dev" --format "{{.Names}}")

	if [ -n "$container_exists" ]; then
		echo "Starting existing ${id}_nvim_dev container"
		start_and_attach_container "$id" "$eng"
	else
		echo "Creating new ${id}_nvim_dev container"

		if [ -z "$workspacedir" ] || [ -z "$neovimdir" ]; then
			echo "Both --workspacedir and --neovimdir are required when creating a new container"
			exit 1
		fi

		gitenvstring=$(get_git_name_and_mail)

		$eng run --name "${id}_nvim_dev" $gitenvstring $X11_CONNECT --userns=keep-id $NETWORK -v "$workspacedir":/workspace:Z,U -v "$neovimdir":/config:ro,Z,U -it nvim_dev
	fi
}

# Function to list all containers created by this script
list_containers() {
	local eng="$1"
	$eng ps -a --format "{{.Names}}" | grep "nvim_dev" | sed "s/_nvim_dev$//"
}

# Parse the command line arguments
COMMAND="$1"
shift

while [[ $# -gt 0 ]]; do
	key="$1"
	case $key in
	--workspacedir)
		WORKSPACEDIR="$2"
		shift
		shift
		;;
	--neovimdir)
		NEOVIMDIR="$2"
		shift
		shift
		;;
	--x11)
		X11_CONNECT="-e DISPLAY --security-opt label=type:container_runtime_t -v /tmp/.X11-unix:/tmp/.X11-unix"
		shift
		;;
	--host)
		NETWORK="--network host"
		shift
		;;
	*)
		if [ -z "$ID" ]; then
			ID="$1"
			shift
		else
			echo "Unknown option: $key"
			exit 1
		fi
		;;
	esac
done

# Automatically detect podman or docker
if command -v podman >/dev/null 2>&1; then
	eng=podman
elif command -v docker >/dev/null 2>&1; then
	eng=docker
else
	echo "Neither Podman nor Docker was found on your system."
	exit 1
fi

# Execute the command
case $COMMAND in
s | start)
	if [ -z "$ID" ]; then
		echo "You must provide an ID for the container."
		exit 1
	fi
	run_container "$ID" "$eng" "$WORKSPACEDIR" "$NEOVIMDIR"
	;;
l | list)
	list_containers "$eng"
	;;
r | remove)
	if [ -z "$ID" ]; then
		echo "You must provide an ID for the container to remove."
		exit 1
	fi
	remove_container "$ID" "$eng"
	;;
-h | --help)
	display_help
	;;
*)
	echo "Unknown command: $COMMAND"
	echo "Available commands: start, list, remove, help"
	exit 1
	;;
esac
